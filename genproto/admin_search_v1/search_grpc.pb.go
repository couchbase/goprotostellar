// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: couchbase/admin/search/v1/search.proto

package admin_search_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SearchAdminServiceClient is the client API for SearchAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchAdminServiceClient interface {
	GetIndex(ctx context.Context, in *GetIndexRequest, opts ...grpc.CallOption) (*GetIndexResponse, error)
	ListIndexes(ctx context.Context, in *ListIndexesRequest, opts ...grpc.CallOption) (*ListIndexesResponse, error)
	UpsertIndex(ctx context.Context, in *UpsertIndexRequest, opts ...grpc.CallOption) (*UpsertIndexResponse, error)
	DeleteIndex(ctx context.Context, in *DeleteIndexRequest, opts ...grpc.CallOption) (*DeleteIndexResponse, error)
}

type searchAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchAdminServiceClient(cc grpc.ClientConnInterface) SearchAdminServiceClient {
	return &searchAdminServiceClient{cc}
}

func (c *searchAdminServiceClient) GetIndex(ctx context.Context, in *GetIndexRequest, opts ...grpc.CallOption) (*GetIndexResponse, error) {
	out := new(GetIndexResponse)
	err := c.cc.Invoke(ctx, "/couchbase.admin.search.v1.SearchAdminService/GetIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchAdminServiceClient) ListIndexes(ctx context.Context, in *ListIndexesRequest, opts ...grpc.CallOption) (*ListIndexesResponse, error) {
	out := new(ListIndexesResponse)
	err := c.cc.Invoke(ctx, "/couchbase.admin.search.v1.SearchAdminService/ListIndexes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchAdminServiceClient) UpsertIndex(ctx context.Context, in *UpsertIndexRequest, opts ...grpc.CallOption) (*UpsertIndexResponse, error) {
	out := new(UpsertIndexResponse)
	err := c.cc.Invoke(ctx, "/couchbase.admin.search.v1.SearchAdminService/UpsertIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchAdminServiceClient) DeleteIndex(ctx context.Context, in *DeleteIndexRequest, opts ...grpc.CallOption) (*DeleteIndexResponse, error) {
	out := new(DeleteIndexResponse)
	err := c.cc.Invoke(ctx, "/couchbase.admin.search.v1.SearchAdminService/DeleteIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchAdminServiceServer is the server API for SearchAdminService service.
// All implementations must embed UnimplementedSearchAdminServiceServer
// for forward compatibility
type SearchAdminServiceServer interface {
	GetIndex(context.Context, *GetIndexRequest) (*GetIndexResponse, error)
	ListIndexes(context.Context, *ListIndexesRequest) (*ListIndexesResponse, error)
	UpsertIndex(context.Context, *UpsertIndexRequest) (*UpsertIndexResponse, error)
	DeleteIndex(context.Context, *DeleteIndexRequest) (*DeleteIndexResponse, error)
	mustEmbedUnimplementedSearchAdminServiceServer()
}

// UnimplementedSearchAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSearchAdminServiceServer struct {
}

func (UnimplementedSearchAdminServiceServer) GetIndex(context.Context, *GetIndexRequest) (*GetIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndex not implemented")
}
func (UnimplementedSearchAdminServiceServer) ListIndexes(context.Context, *ListIndexesRequest) (*ListIndexesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIndexes not implemented")
}
func (UnimplementedSearchAdminServiceServer) UpsertIndex(context.Context, *UpsertIndexRequest) (*UpsertIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertIndex not implemented")
}
func (UnimplementedSearchAdminServiceServer) DeleteIndex(context.Context, *DeleteIndexRequest) (*DeleteIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIndex not implemented")
}
func (UnimplementedSearchAdminServiceServer) mustEmbedUnimplementedSearchAdminServiceServer() {}

// UnsafeSearchAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchAdminServiceServer will
// result in compilation errors.
type UnsafeSearchAdminServiceServer interface {
	mustEmbedUnimplementedSearchAdminServiceServer()
}

func RegisterSearchAdminServiceServer(s grpc.ServiceRegistrar, srv SearchAdminServiceServer) {
	s.RegisterService(&SearchAdminService_ServiceDesc, srv)
}

func _SearchAdminService_GetIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchAdminServiceServer).GetIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/couchbase.admin.search.v1.SearchAdminService/GetIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchAdminServiceServer).GetIndex(ctx, req.(*GetIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchAdminService_ListIndexes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIndexesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchAdminServiceServer).ListIndexes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/couchbase.admin.search.v1.SearchAdminService/ListIndexes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchAdminServiceServer).ListIndexes(ctx, req.(*ListIndexesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchAdminService_UpsertIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchAdminServiceServer).UpsertIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/couchbase.admin.search.v1.SearchAdminService/UpsertIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchAdminServiceServer).UpsertIndex(ctx, req.(*UpsertIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchAdminService_DeleteIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchAdminServiceServer).DeleteIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/couchbase.admin.search.v1.SearchAdminService/DeleteIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchAdminServiceServer).DeleteIndex(ctx, req.(*DeleteIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchAdminService_ServiceDesc is the grpc.ServiceDesc for SearchAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "couchbase.admin.search.v1.SearchAdminService",
	HandlerType: (*SearchAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIndex",
			Handler:    _SearchAdminService_GetIndex_Handler,
		},
		{
			MethodName: "ListIndexes",
			Handler:    _SearchAdminService_ListIndexes_Handler,
		},
		{
			MethodName: "UpsertIndex",
			Handler:    _SearchAdminService_UpsertIndex_Handler,
		},
		{
			MethodName: "DeleteIndex",
			Handler:    _SearchAdminService_DeleteIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "couchbase/admin/search/v1/search.proto",
}
