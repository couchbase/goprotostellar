// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: couchbase/admin/search/v1/search.proto

package admin_search_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SearchAdminService_GetIndex_FullMethodName                 = "/couchbase.admin.search.v1.SearchAdminService/GetIndex"
	SearchAdminService_ListIndexes_FullMethodName              = "/couchbase.admin.search.v1.SearchAdminService/ListIndexes"
	SearchAdminService_CreateIndex_FullMethodName              = "/couchbase.admin.search.v1.SearchAdminService/CreateIndex"
	SearchAdminService_UpdateIndex_FullMethodName              = "/couchbase.admin.search.v1.SearchAdminService/UpdateIndex"
	SearchAdminService_DeleteIndex_FullMethodName              = "/couchbase.admin.search.v1.SearchAdminService/DeleteIndex"
	SearchAdminService_AnalyzeDocument_FullMethodName          = "/couchbase.admin.search.v1.SearchAdminService/AnalyzeDocument"
	SearchAdminService_GetIndexedDocumentsCount_FullMethodName = "/couchbase.admin.search.v1.SearchAdminService/GetIndexedDocumentsCount"
	SearchAdminService_PauseIndexIngest_FullMethodName         = "/couchbase.admin.search.v1.SearchAdminService/PauseIndexIngest"
	SearchAdminService_ResumeIndexIngest_FullMethodName        = "/couchbase.admin.search.v1.SearchAdminService/ResumeIndexIngest"
	SearchAdminService_AllowIndexQuerying_FullMethodName       = "/couchbase.admin.search.v1.SearchAdminService/AllowIndexQuerying"
	SearchAdminService_DisallowIndexQuerying_FullMethodName    = "/couchbase.admin.search.v1.SearchAdminService/DisallowIndexQuerying"
	SearchAdminService_FreezeIndexPlan_FullMethodName          = "/couchbase.admin.search.v1.SearchAdminService/FreezeIndexPlan"
	SearchAdminService_UnfreezeIndexPlan_FullMethodName        = "/couchbase.admin.search.v1.SearchAdminService/UnfreezeIndexPlan"
)

// SearchAdminServiceClient is the client API for SearchAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchAdminServiceClient interface {
	GetIndex(ctx context.Context, in *GetIndexRequest, opts ...grpc.CallOption) (*GetIndexResponse, error)
	ListIndexes(ctx context.Context, in *ListIndexesRequest, opts ...grpc.CallOption) (*ListIndexesResponse, error)
	CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...grpc.CallOption) (*CreateIndexResponse, error)
	UpdateIndex(ctx context.Context, in *UpdateIndexRequest, opts ...grpc.CallOption) (*UpdateIndexResponse, error)
	DeleteIndex(ctx context.Context, in *DeleteIndexRequest, opts ...grpc.CallOption) (*DeleteIndexResponse, error)
	AnalyzeDocument(ctx context.Context, in *AnalyzeDocumentRequest, opts ...grpc.CallOption) (*AnalyzeDocumentResponse, error)
	GetIndexedDocumentsCount(ctx context.Context, in *GetIndexedDocumentsCountRequest, opts ...grpc.CallOption) (*GetIndexedDocumentsCountResponse, error)
	PauseIndexIngest(ctx context.Context, in *PauseIndexIngestRequest, opts ...grpc.CallOption) (*PauseIndexIngestResponse, error)
	ResumeIndexIngest(ctx context.Context, in *ResumeIndexIngestRequest, opts ...grpc.CallOption) (*ResumeIndexIngestResponse, error)
	AllowIndexQuerying(ctx context.Context, in *AllowIndexQueryingRequest, opts ...grpc.CallOption) (*AllowIndexQueryingResponse, error)
	DisallowIndexQuerying(ctx context.Context, in *DisallowIndexQueryingRequest, opts ...grpc.CallOption) (*DisallowIndexQueryingResponse, error)
	FreezeIndexPlan(ctx context.Context, in *FreezeIndexPlanRequest, opts ...grpc.CallOption) (*FreezeIndexPlanResponse, error)
	UnfreezeIndexPlan(ctx context.Context, in *UnfreezeIndexPlanRequest, opts ...grpc.CallOption) (*UnfreezeIndexPlanResponse, error)
}

type searchAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchAdminServiceClient(cc grpc.ClientConnInterface) SearchAdminServiceClient {
	return &searchAdminServiceClient{cc}
}

func (c *searchAdminServiceClient) GetIndex(ctx context.Context, in *GetIndexRequest, opts ...grpc.CallOption) (*GetIndexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIndexResponse)
	err := c.cc.Invoke(ctx, SearchAdminService_GetIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchAdminServiceClient) ListIndexes(ctx context.Context, in *ListIndexesRequest, opts ...grpc.CallOption) (*ListIndexesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListIndexesResponse)
	err := c.cc.Invoke(ctx, SearchAdminService_ListIndexes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchAdminServiceClient) CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...grpc.CallOption) (*CreateIndexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIndexResponse)
	err := c.cc.Invoke(ctx, SearchAdminService_CreateIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchAdminServiceClient) UpdateIndex(ctx context.Context, in *UpdateIndexRequest, opts ...grpc.CallOption) (*UpdateIndexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateIndexResponse)
	err := c.cc.Invoke(ctx, SearchAdminService_UpdateIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchAdminServiceClient) DeleteIndex(ctx context.Context, in *DeleteIndexRequest, opts ...grpc.CallOption) (*DeleteIndexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteIndexResponse)
	err := c.cc.Invoke(ctx, SearchAdminService_DeleteIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchAdminServiceClient) AnalyzeDocument(ctx context.Context, in *AnalyzeDocumentRequest, opts ...grpc.CallOption) (*AnalyzeDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzeDocumentResponse)
	err := c.cc.Invoke(ctx, SearchAdminService_AnalyzeDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchAdminServiceClient) GetIndexedDocumentsCount(ctx context.Context, in *GetIndexedDocumentsCountRequest, opts ...grpc.CallOption) (*GetIndexedDocumentsCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIndexedDocumentsCountResponse)
	err := c.cc.Invoke(ctx, SearchAdminService_GetIndexedDocumentsCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchAdminServiceClient) PauseIndexIngest(ctx context.Context, in *PauseIndexIngestRequest, opts ...grpc.CallOption) (*PauseIndexIngestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PauseIndexIngestResponse)
	err := c.cc.Invoke(ctx, SearchAdminService_PauseIndexIngest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchAdminServiceClient) ResumeIndexIngest(ctx context.Context, in *ResumeIndexIngestRequest, opts ...grpc.CallOption) (*ResumeIndexIngestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResumeIndexIngestResponse)
	err := c.cc.Invoke(ctx, SearchAdminService_ResumeIndexIngest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchAdminServiceClient) AllowIndexQuerying(ctx context.Context, in *AllowIndexQueryingRequest, opts ...grpc.CallOption) (*AllowIndexQueryingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllowIndexQueryingResponse)
	err := c.cc.Invoke(ctx, SearchAdminService_AllowIndexQuerying_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchAdminServiceClient) DisallowIndexQuerying(ctx context.Context, in *DisallowIndexQueryingRequest, opts ...grpc.CallOption) (*DisallowIndexQueryingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DisallowIndexQueryingResponse)
	err := c.cc.Invoke(ctx, SearchAdminService_DisallowIndexQuerying_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchAdminServiceClient) FreezeIndexPlan(ctx context.Context, in *FreezeIndexPlanRequest, opts ...grpc.CallOption) (*FreezeIndexPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FreezeIndexPlanResponse)
	err := c.cc.Invoke(ctx, SearchAdminService_FreezeIndexPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchAdminServiceClient) UnfreezeIndexPlan(ctx context.Context, in *UnfreezeIndexPlanRequest, opts ...grpc.CallOption) (*UnfreezeIndexPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnfreezeIndexPlanResponse)
	err := c.cc.Invoke(ctx, SearchAdminService_UnfreezeIndexPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchAdminServiceServer is the server API for SearchAdminService service.
// All implementations must embed UnimplementedSearchAdminServiceServer
// for forward compatibility.
type SearchAdminServiceServer interface {
	GetIndex(context.Context, *GetIndexRequest) (*GetIndexResponse, error)
	ListIndexes(context.Context, *ListIndexesRequest) (*ListIndexesResponse, error)
	CreateIndex(context.Context, *CreateIndexRequest) (*CreateIndexResponse, error)
	UpdateIndex(context.Context, *UpdateIndexRequest) (*UpdateIndexResponse, error)
	DeleteIndex(context.Context, *DeleteIndexRequest) (*DeleteIndexResponse, error)
	AnalyzeDocument(context.Context, *AnalyzeDocumentRequest) (*AnalyzeDocumentResponse, error)
	GetIndexedDocumentsCount(context.Context, *GetIndexedDocumentsCountRequest) (*GetIndexedDocumentsCountResponse, error)
	PauseIndexIngest(context.Context, *PauseIndexIngestRequest) (*PauseIndexIngestResponse, error)
	ResumeIndexIngest(context.Context, *ResumeIndexIngestRequest) (*ResumeIndexIngestResponse, error)
	AllowIndexQuerying(context.Context, *AllowIndexQueryingRequest) (*AllowIndexQueryingResponse, error)
	DisallowIndexQuerying(context.Context, *DisallowIndexQueryingRequest) (*DisallowIndexQueryingResponse, error)
	FreezeIndexPlan(context.Context, *FreezeIndexPlanRequest) (*FreezeIndexPlanResponse, error)
	UnfreezeIndexPlan(context.Context, *UnfreezeIndexPlanRequest) (*UnfreezeIndexPlanResponse, error)
	mustEmbedUnimplementedSearchAdminServiceServer()
}

// UnimplementedSearchAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSearchAdminServiceServer struct{}

func (UnimplementedSearchAdminServiceServer) GetIndex(context.Context, *GetIndexRequest) (*GetIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndex not implemented")
}
func (UnimplementedSearchAdminServiceServer) ListIndexes(context.Context, *ListIndexesRequest) (*ListIndexesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIndexes not implemented")
}
func (UnimplementedSearchAdminServiceServer) CreateIndex(context.Context, *CreateIndexRequest) (*CreateIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndex not implemented")
}
func (UnimplementedSearchAdminServiceServer) UpdateIndex(context.Context, *UpdateIndexRequest) (*UpdateIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIndex not implemented")
}
func (UnimplementedSearchAdminServiceServer) DeleteIndex(context.Context, *DeleteIndexRequest) (*DeleteIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIndex not implemented")
}
func (UnimplementedSearchAdminServiceServer) AnalyzeDocument(context.Context, *AnalyzeDocumentRequest) (*AnalyzeDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeDocument not implemented")
}
func (UnimplementedSearchAdminServiceServer) GetIndexedDocumentsCount(context.Context, *GetIndexedDocumentsCountRequest) (*GetIndexedDocumentsCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexedDocumentsCount not implemented")
}
func (UnimplementedSearchAdminServiceServer) PauseIndexIngest(context.Context, *PauseIndexIngestRequest) (*PauseIndexIngestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseIndexIngest not implemented")
}
func (UnimplementedSearchAdminServiceServer) ResumeIndexIngest(context.Context, *ResumeIndexIngestRequest) (*ResumeIndexIngestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeIndexIngest not implemented")
}
func (UnimplementedSearchAdminServiceServer) AllowIndexQuerying(context.Context, *AllowIndexQueryingRequest) (*AllowIndexQueryingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllowIndexQuerying not implemented")
}
func (UnimplementedSearchAdminServiceServer) DisallowIndexQuerying(context.Context, *DisallowIndexQueryingRequest) (*DisallowIndexQueryingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisallowIndexQuerying not implemented")
}
func (UnimplementedSearchAdminServiceServer) FreezeIndexPlan(context.Context, *FreezeIndexPlanRequest) (*FreezeIndexPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreezeIndexPlan not implemented")
}
func (UnimplementedSearchAdminServiceServer) UnfreezeIndexPlan(context.Context, *UnfreezeIndexPlanRequest) (*UnfreezeIndexPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfreezeIndexPlan not implemented")
}
func (UnimplementedSearchAdminServiceServer) mustEmbedUnimplementedSearchAdminServiceServer() {}
func (UnimplementedSearchAdminServiceServer) testEmbeddedByValue()                            {}

// UnsafeSearchAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchAdminServiceServer will
// result in compilation errors.
type UnsafeSearchAdminServiceServer interface {
	mustEmbedUnimplementedSearchAdminServiceServer()
}

func RegisterSearchAdminServiceServer(s grpc.ServiceRegistrar, srv SearchAdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedSearchAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SearchAdminService_ServiceDesc, srv)
}

func _SearchAdminService_GetIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchAdminServiceServer).GetIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchAdminService_GetIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchAdminServiceServer).GetIndex(ctx, req.(*GetIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchAdminService_ListIndexes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIndexesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchAdminServiceServer).ListIndexes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchAdminService_ListIndexes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchAdminServiceServer).ListIndexes(ctx, req.(*ListIndexesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchAdminService_CreateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchAdminServiceServer).CreateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchAdminService_CreateIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchAdminServiceServer).CreateIndex(ctx, req.(*CreateIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchAdminService_UpdateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchAdminServiceServer).UpdateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchAdminService_UpdateIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchAdminServiceServer).UpdateIndex(ctx, req.(*UpdateIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchAdminService_DeleteIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchAdminServiceServer).DeleteIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchAdminService_DeleteIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchAdminServiceServer).DeleteIndex(ctx, req.(*DeleteIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchAdminService_AnalyzeDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchAdminServiceServer).AnalyzeDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchAdminService_AnalyzeDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchAdminServiceServer).AnalyzeDocument(ctx, req.(*AnalyzeDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchAdminService_GetIndexedDocumentsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndexedDocumentsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchAdminServiceServer).GetIndexedDocumentsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchAdminService_GetIndexedDocumentsCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchAdminServiceServer).GetIndexedDocumentsCount(ctx, req.(*GetIndexedDocumentsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchAdminService_PauseIndexIngest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseIndexIngestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchAdminServiceServer).PauseIndexIngest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchAdminService_PauseIndexIngest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchAdminServiceServer).PauseIndexIngest(ctx, req.(*PauseIndexIngestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchAdminService_ResumeIndexIngest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeIndexIngestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchAdminServiceServer).ResumeIndexIngest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchAdminService_ResumeIndexIngest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchAdminServiceServer).ResumeIndexIngest(ctx, req.(*ResumeIndexIngestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchAdminService_AllowIndexQuerying_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllowIndexQueryingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchAdminServiceServer).AllowIndexQuerying(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchAdminService_AllowIndexQuerying_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchAdminServiceServer).AllowIndexQuerying(ctx, req.(*AllowIndexQueryingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchAdminService_DisallowIndexQuerying_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisallowIndexQueryingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchAdminServiceServer).DisallowIndexQuerying(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchAdminService_DisallowIndexQuerying_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchAdminServiceServer).DisallowIndexQuerying(ctx, req.(*DisallowIndexQueryingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchAdminService_FreezeIndexPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreezeIndexPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchAdminServiceServer).FreezeIndexPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchAdminService_FreezeIndexPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchAdminServiceServer).FreezeIndexPlan(ctx, req.(*FreezeIndexPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchAdminService_UnfreezeIndexPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfreezeIndexPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchAdminServiceServer).UnfreezeIndexPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearchAdminService_UnfreezeIndexPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchAdminServiceServer).UnfreezeIndexPlan(ctx, req.(*UnfreezeIndexPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchAdminService_ServiceDesc is the grpc.ServiceDesc for SearchAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "couchbase.admin.search.v1.SearchAdminService",
	HandlerType: (*SearchAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIndex",
			Handler:    _SearchAdminService_GetIndex_Handler,
		},
		{
			MethodName: "ListIndexes",
			Handler:    _SearchAdminService_ListIndexes_Handler,
		},
		{
			MethodName: "CreateIndex",
			Handler:    _SearchAdminService_CreateIndex_Handler,
		},
		{
			MethodName: "UpdateIndex",
			Handler:    _SearchAdminService_UpdateIndex_Handler,
		},
		{
			MethodName: "DeleteIndex",
			Handler:    _SearchAdminService_DeleteIndex_Handler,
		},
		{
			MethodName: "AnalyzeDocument",
			Handler:    _SearchAdminService_AnalyzeDocument_Handler,
		},
		{
			MethodName: "GetIndexedDocumentsCount",
			Handler:    _SearchAdminService_GetIndexedDocumentsCount_Handler,
		},
		{
			MethodName: "PauseIndexIngest",
			Handler:    _SearchAdminService_PauseIndexIngest_Handler,
		},
		{
			MethodName: "ResumeIndexIngest",
			Handler:    _SearchAdminService_ResumeIndexIngest_Handler,
		},
		{
			MethodName: "AllowIndexQuerying",
			Handler:    _SearchAdminService_AllowIndexQuerying_Handler,
		},
		{
			MethodName: "DisallowIndexQuerying",
			Handler:    _SearchAdminService_DisallowIndexQuerying_Handler,
		},
		{
			MethodName: "FreezeIndexPlan",
			Handler:    _SearchAdminService_FreezeIndexPlan_Handler,
		},
		{
			MethodName: "UnfreezeIndexPlan",
			Handler:    _SearchAdminService_UnfreezeIndexPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "couchbase/admin/search/v1/search.proto",
}
