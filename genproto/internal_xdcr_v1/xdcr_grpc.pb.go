// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: couchbase/internal/xdcr/v1/xdcr.proto

package internal_xdcr_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	XdcrService_Heartbeat_FullMethodName        = "/couchbase.internal.xdcr.v1.XdcrService/Heartbeat"
	XdcrService_GetClusterInfo_FullMethodName   = "/couchbase.internal.xdcr.v1.XdcrService/GetClusterInfo"
	XdcrService_GetBucketInfo_FullMethodName    = "/couchbase.internal.xdcr.v1.XdcrService/GetBucketInfo"
	XdcrService_GetVbucketInfo_FullMethodName   = "/couchbase.internal.xdcr.v1.XdcrService/GetVbucketInfo"
	XdcrService_WatchCollections_FullMethodName = "/couchbase.internal.xdcr.v1.XdcrService/WatchCollections"
	XdcrService_GetDocument_FullMethodName      = "/couchbase.internal.xdcr.v1.XdcrService/GetDocument"
	XdcrService_CheckDocument_FullMethodName    = "/couchbase.internal.xdcr.v1.XdcrService/CheckDocument"
	XdcrService_PushDocument_FullMethodName     = "/couchbase.internal.xdcr.v1.XdcrService/PushDocument"
)

// XdcrServiceClient is the client API for XdcrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XdcrServiceClient interface {
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	GetClusterInfo(ctx context.Context, in *GetClusterInfoRequest, opts ...grpc.CallOption) (*GetClusterInfoResponse, error)
	GetBucketInfo(ctx context.Context, in *GetBucketInfoRequest, opts ...grpc.CallOption) (*GetBucketInfoResponse, error)
	GetVbucketInfo(ctx context.Context, in *GetVbucketInfoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetVbucketInfoResponse], error)
	WatchCollections(ctx context.Context, in *WatchCollectionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchCollectionsResponse], error)
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error)
	CheckDocument(ctx context.Context, in *CheckDocumentRequest, opts ...grpc.CallOption) (*CheckDocumentResponse, error)
	PushDocument(ctx context.Context, in *PushDocumentRequest, opts ...grpc.CallOption) (*PushDocumentResponse, error)
}

type xdcrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewXdcrServiceClient(cc grpc.ClientConnInterface) XdcrServiceClient {
	return &xdcrServiceClient{cc}
}

func (c *xdcrServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, XdcrService_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xdcrServiceClient) GetClusterInfo(ctx context.Context, in *GetClusterInfoRequest, opts ...grpc.CallOption) (*GetClusterInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClusterInfoResponse)
	err := c.cc.Invoke(ctx, XdcrService_GetClusterInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xdcrServiceClient) GetBucketInfo(ctx context.Context, in *GetBucketInfoRequest, opts ...grpc.CallOption) (*GetBucketInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBucketInfoResponse)
	err := c.cc.Invoke(ctx, XdcrService_GetBucketInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xdcrServiceClient) GetVbucketInfo(ctx context.Context, in *GetVbucketInfoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetVbucketInfoResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &XdcrService_ServiceDesc.Streams[0], XdcrService_GetVbucketInfo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetVbucketInfoRequest, GetVbucketInfoResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type XdcrService_GetVbucketInfoClient = grpc.ServerStreamingClient[GetVbucketInfoResponse]

func (c *xdcrServiceClient) WatchCollections(ctx context.Context, in *WatchCollectionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WatchCollectionsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &XdcrService_ServiceDesc.Streams[1], XdcrService_WatchCollections_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WatchCollectionsRequest, WatchCollectionsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type XdcrService_WatchCollectionsClient = grpc.ServerStreamingClient[WatchCollectionsResponse]

func (c *xdcrServiceClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocumentResponse)
	err := c.cc.Invoke(ctx, XdcrService_GetDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xdcrServiceClient) CheckDocument(ctx context.Context, in *CheckDocumentRequest, opts ...grpc.CallOption) (*CheckDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckDocumentResponse)
	err := c.cc.Invoke(ctx, XdcrService_CheckDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xdcrServiceClient) PushDocument(ctx context.Context, in *PushDocumentRequest, opts ...grpc.CallOption) (*PushDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushDocumentResponse)
	err := c.cc.Invoke(ctx, XdcrService_PushDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XdcrServiceServer is the server API for XdcrService service.
// All implementations must embed UnimplementedXdcrServiceServer
// for forward compatibility.
type XdcrServiceServer interface {
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	GetClusterInfo(context.Context, *GetClusterInfoRequest) (*GetClusterInfoResponse, error)
	GetBucketInfo(context.Context, *GetBucketInfoRequest) (*GetBucketInfoResponse, error)
	GetVbucketInfo(*GetVbucketInfoRequest, grpc.ServerStreamingServer[GetVbucketInfoResponse]) error
	WatchCollections(*WatchCollectionsRequest, grpc.ServerStreamingServer[WatchCollectionsResponse]) error
	GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error)
	CheckDocument(context.Context, *CheckDocumentRequest) (*CheckDocumentResponse, error)
	PushDocument(context.Context, *PushDocumentRequest) (*PushDocumentResponse, error)
	mustEmbedUnimplementedXdcrServiceServer()
}

// UnimplementedXdcrServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedXdcrServiceServer struct{}

func (UnimplementedXdcrServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedXdcrServiceServer) GetClusterInfo(context.Context, *GetClusterInfoRequest) (*GetClusterInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterInfo not implemented")
}
func (UnimplementedXdcrServiceServer) GetBucketInfo(context.Context, *GetBucketInfoRequest) (*GetBucketInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBucketInfo not implemented")
}
func (UnimplementedXdcrServiceServer) GetVbucketInfo(*GetVbucketInfoRequest, grpc.ServerStreamingServer[GetVbucketInfoResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetVbucketInfo not implemented")
}
func (UnimplementedXdcrServiceServer) WatchCollections(*WatchCollectionsRequest, grpc.ServerStreamingServer[WatchCollectionsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method WatchCollections not implemented")
}
func (UnimplementedXdcrServiceServer) GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedXdcrServiceServer) CheckDocument(context.Context, *CheckDocumentRequest) (*CheckDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDocument not implemented")
}
func (UnimplementedXdcrServiceServer) PushDocument(context.Context, *PushDocumentRequest) (*PushDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushDocument not implemented")
}
func (UnimplementedXdcrServiceServer) mustEmbedUnimplementedXdcrServiceServer() {}
func (UnimplementedXdcrServiceServer) testEmbeddedByValue()                     {}

// UnsafeXdcrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XdcrServiceServer will
// result in compilation errors.
type UnsafeXdcrServiceServer interface {
	mustEmbedUnimplementedXdcrServiceServer()
}

func RegisterXdcrServiceServer(s grpc.ServiceRegistrar, srv XdcrServiceServer) {
	// If the following call pancis, it indicates UnimplementedXdcrServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&XdcrService_ServiceDesc, srv)
}

func _XdcrService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XdcrServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XdcrService_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XdcrServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XdcrService_GetClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XdcrServiceServer).GetClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XdcrService_GetClusterInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XdcrServiceServer).GetClusterInfo(ctx, req.(*GetClusterInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XdcrService_GetBucketInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBucketInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XdcrServiceServer).GetBucketInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XdcrService_GetBucketInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XdcrServiceServer).GetBucketInfo(ctx, req.(*GetBucketInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XdcrService_GetVbucketInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetVbucketInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(XdcrServiceServer).GetVbucketInfo(m, &grpc.GenericServerStream[GetVbucketInfoRequest, GetVbucketInfoResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type XdcrService_GetVbucketInfoServer = grpc.ServerStreamingServer[GetVbucketInfoResponse]

func _XdcrService_WatchCollections_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchCollectionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(XdcrServiceServer).WatchCollections(m, &grpc.GenericServerStream[WatchCollectionsRequest, WatchCollectionsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type XdcrService_WatchCollectionsServer = grpc.ServerStreamingServer[WatchCollectionsResponse]

func _XdcrService_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XdcrServiceServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XdcrService_GetDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XdcrServiceServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XdcrService_CheckDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XdcrServiceServer).CheckDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XdcrService_CheckDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XdcrServiceServer).CheckDocument(ctx, req.(*CheckDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XdcrService_PushDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XdcrServiceServer).PushDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XdcrService_PushDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XdcrServiceServer).PushDocument(ctx, req.(*PushDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// XdcrService_ServiceDesc is the grpc.ServiceDesc for XdcrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XdcrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "couchbase.internal.xdcr.v1.XdcrService",
	HandlerType: (*XdcrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _XdcrService_Heartbeat_Handler,
		},
		{
			MethodName: "GetClusterInfo",
			Handler:    _XdcrService_GetClusterInfo_Handler,
		},
		{
			MethodName: "GetBucketInfo",
			Handler:    _XdcrService_GetBucketInfo_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _XdcrService_GetDocument_Handler,
		},
		{
			MethodName: "CheckDocument",
			Handler:    _XdcrService_CheckDocument_Handler,
		},
		{
			MethodName: "PushDocument",
			Handler:    _XdcrService_PushDocument_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetVbucketInfo",
			Handler:       _XdcrService_GetVbucketInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchCollections",
			Handler:       _XdcrService_WatchCollections_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "couchbase/internal/xdcr/v1/xdcr.proto",
}
