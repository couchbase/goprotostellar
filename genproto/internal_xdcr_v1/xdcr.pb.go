// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: couchbase/internal/xdcr/v1/xdcr.proto

package internal_xdcr_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConflictResolutionType int32

const (
	ConflictResolutionType_CONFLICT_RESOLUTION_TYPE_TIMESTAMP       ConflictResolutionType = 0
	ConflictResolutionType_CONFLICT_RESOLUTION_TYPE_SEQUENCE_NUMBER ConflictResolutionType = 1
	ConflictResolutionType_CONFLICT_RESOLUTION_TYPE_CUSTOM          ConflictResolutionType = 2
)

// Enum value maps for ConflictResolutionType.
var (
	ConflictResolutionType_name = map[int32]string{
		0: "CONFLICT_RESOLUTION_TYPE_TIMESTAMP",
		1: "CONFLICT_RESOLUTION_TYPE_SEQUENCE_NUMBER",
		2: "CONFLICT_RESOLUTION_TYPE_CUSTOM",
	}
	ConflictResolutionType_value = map[string]int32{
		"CONFLICT_RESOLUTION_TYPE_TIMESTAMP":       0,
		"CONFLICT_RESOLUTION_TYPE_SEQUENCE_NUMBER": 1,
		"CONFLICT_RESOLUTION_TYPE_CUSTOM":          2,
	}
)

func (x ConflictResolutionType) Enum() *ConflictResolutionType {
	p := new(ConflictResolutionType)
	*p = x
	return p
}

func (x ConflictResolutionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConflictResolutionType) Descriptor() protoreflect.EnumDescriptor {
	return file_couchbase_internal_xdcr_v1_xdcr_proto_enumTypes[0].Descriptor()
}

func (ConflictResolutionType) Type() protoreflect.EnumType {
	return &file_couchbase_internal_xdcr_v1_xdcr_proto_enumTypes[0]
}

func (x ConflictResolutionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConflictResolutionType.Descriptor instead.
func (ConflictResolutionType) EnumDescriptor() ([]byte, []int) {
	return file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescGZIP(), []int{0}
}

type ContentType int32

const (
	ContentType_CONTENT_TYPE_NONJSON ContentType = 0
	ContentType_CONTENT_TYPE_JSON    ContentType = 1
)

// Enum value maps for ContentType.
var (
	ContentType_name = map[int32]string{
		0: "CONTENT_TYPE_NONJSON",
		1: "CONTENT_TYPE_JSON",
	}
	ContentType_value = map[string]int32{
		"CONTENT_TYPE_NONJSON": 0,
		"CONTENT_TYPE_JSON":    1,
	}
)

func (x ContentType) Enum() *ContentType {
	p := new(ContentType)
	*p = x
	return p
}

func (x ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_couchbase_internal_xdcr_v1_xdcr_proto_enumTypes[1].Descriptor()
}

func (ContentType) Type() protoreflect.EnumType {
	return &file_couchbase_internal_xdcr_v1_xdcr_proto_enumTypes[1]
}

func (x ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentType.Descriptor instead.
func (ContentType) EnumDescriptor() ([]byte, []int) {
	return file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescGZIP(), []int{1}
}

type HeartbeatRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Payload       []byte                 `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeartbeatRequest) Reset() {
	*x = HeartbeatRequest{}
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatRequest) ProtoMessage() {}

func (x *HeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatRequest.ProtoReflect.Descriptor instead.
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescGZIP(), []int{0}
}

func (x *HeartbeatRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type HeartbeatResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeartbeatResponse) Reset() {
	*x = HeartbeatResponse{}
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatResponse) ProtoMessage() {}

func (x *HeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatResponse.ProtoReflect.Descriptor instead.
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescGZIP(), []int{1}
}

type GetClusterInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterInfoRequest) Reset() {
	*x = GetClusterInfoRequest{}
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterInfoRequest) ProtoMessage() {}

func (x *GetClusterInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterInfoRequest.ProtoReflect.Descriptor instead.
func (*GetClusterInfoRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescGZIP(), []int{2}
}

type GetClusterInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClusterUuid   string                 `protobuf:"bytes,1,opt,name=cluster_uuid,json=clusterUuid,proto3" json:"cluster_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterInfoResponse) Reset() {
	*x = GetClusterInfoResponse{}
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterInfoResponse) ProtoMessage() {}

func (x *GetClusterInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterInfoResponse.ProtoReflect.Descriptor instead.
func (*GetClusterInfoResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescGZIP(), []int{3}
}

func (x *GetClusterInfoResponse) GetClusterUuid() string {
	if x != nil {
		return x.ClusterUuid
	}
	return ""
}

type GetBucketInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BucketName    string                 `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBucketInfoRequest) Reset() {
	*x = GetBucketInfoRequest{}
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBucketInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBucketInfoRequest) ProtoMessage() {}

func (x *GetBucketInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBucketInfoRequest.ProtoReflect.Descriptor instead.
func (*GetBucketInfoRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescGZIP(), []int{4}
}

func (x *GetBucketInfoRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

type GetBucketInfoResponse struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	BucketUuid                    string                 `protobuf:"bytes,2,opt,name=bucket_uuid,json=bucketUuid,proto3" json:"bucket_uuid,omitempty"`
	NumVbuckets                   uint32                 `protobuf:"varint,3,opt,name=num_vbuckets,json=numVbuckets,proto3" json:"num_vbuckets,omitempty"`
	ConflictResolutionType        ConflictResolutionType `protobuf:"varint,4,opt,name=conflict_resolution_type,json=conflictResolutionType,proto3,enum=couchbase.internal.xdcr.v1.ConflictResolutionType" json:"conflict_resolution_type,omitempty"`
	CrossClusterVersioningEnabled bool                   `protobuf:"varint,5,opt,name=cross_cluster_versioning_enabled,json=crossClusterVersioningEnabled,proto3" json:"cross_cluster_versioning_enabled,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *GetBucketInfoResponse) Reset() {
	*x = GetBucketInfoResponse{}
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBucketInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBucketInfoResponse) ProtoMessage() {}

func (x *GetBucketInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBucketInfoResponse.ProtoReflect.Descriptor instead.
func (*GetBucketInfoResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescGZIP(), []int{5}
}

func (x *GetBucketInfoResponse) GetBucketUuid() string {
	if x != nil {
		return x.BucketUuid
	}
	return ""
}

func (x *GetBucketInfoResponse) GetNumVbuckets() uint32 {
	if x != nil {
		return x.NumVbuckets
	}
	return 0
}

func (x *GetBucketInfoResponse) GetConflictResolutionType() ConflictResolutionType {
	if x != nil {
		return x.ConflictResolutionType
	}
	return ConflictResolutionType_CONFLICT_RESOLUTION_TYPE_TIMESTAMP
}

func (x *GetBucketInfoResponse) GetCrossClusterVersioningEnabled() bool {
	if x != nil {
		return x.CrossClusterVersioningEnabled
	}
	return false
}

// This is the one we should use, streaming individual vbuckets as we get them
type GetVbucketInfoRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	BucketName     string                 `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	VbucketIds     []uint32               `protobuf:"varint,2,rep,packed,name=vbucket_ids,json=vbucketIds,proto3" json:"vbucket_ids,omitempty"`
	IncludeHistory *bool                  `protobuf:"varint,3,opt,name=include_history,json=includeHistory,proto3,oneof" json:"include_history,omitempty"`
	IncludeMaxCas  *bool                  `protobuf:"varint,4,opt,name=include_max_cas,json=includeMaxCas,proto3,oneof" json:"include_max_cas,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetVbucketInfoRequest) Reset() {
	*x = GetVbucketInfoRequest{}
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVbucketInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVbucketInfoRequest) ProtoMessage() {}

func (x *GetVbucketInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVbucketInfoRequest.ProtoReflect.Descriptor instead.
func (*GetVbucketInfoRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescGZIP(), []int{6}
}

func (x *GetVbucketInfoRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *GetVbucketInfoRequest) GetVbucketIds() []uint32 {
	if x != nil {
		return x.VbucketIds
	}
	return nil
}

func (x *GetVbucketInfoRequest) GetIncludeHistory() bool {
	if x != nil && x.IncludeHistory != nil {
		return *x.IncludeHistory
	}
	return false
}

func (x *GetVbucketInfoRequest) GetIncludeMaxCas() bool {
	if x != nil && x.IncludeMaxCas != nil {
		return *x.IncludeMaxCas
	}
	return false
}

type GetVbucketInfoResponse struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	Vbuckets      []*GetVbucketInfoResponse_VbucketState `protobuf:"bytes,2,rep,name=vbuckets,proto3" json:"vbuckets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVbucketInfoResponse) Reset() {
	*x = GetVbucketInfoResponse{}
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVbucketInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVbucketInfoResponse) ProtoMessage() {}

func (x *GetVbucketInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVbucketInfoResponse.ProtoReflect.Descriptor instead.
func (*GetVbucketInfoResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescGZIP(), []int{7}
}

func (x *GetVbucketInfoResponse) GetVbuckets() []*GetVbucketInfoResponse_VbucketState {
	if x != nil {
		return x.Vbuckets
	}
	return nil
}

type WatchCollectionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BucketName    string                 `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchCollectionsRequest) Reset() {
	*x = WatchCollectionsRequest{}
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchCollectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchCollectionsRequest) ProtoMessage() {}

func (x *WatchCollectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchCollectionsRequest.ProtoReflect.Descriptor instead.
func (*WatchCollectionsRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescGZIP(), []int{8}
}

func (x *WatchCollectionsRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

type WatchCollectionsResponse struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	ManifestUid   uint32                            `protobuf:"varint,1,opt,name=manifest_uid,json=manifestUid,proto3" json:"manifest_uid,omitempty"`
	Scopes        []*WatchCollectionsResponse_Scope `protobuf:"bytes,2,rep,name=scopes,proto3" json:"scopes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchCollectionsResponse) Reset() {
	*x = WatchCollectionsResponse{}
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchCollectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchCollectionsResponse) ProtoMessage() {}

func (x *WatchCollectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchCollectionsResponse.ProtoReflect.Descriptor instead.
func (*WatchCollectionsResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescGZIP(), []int{9}
}

func (x *WatchCollectionsResponse) GetManifestUid() uint32 {
	if x != nil {
		return x.ManifestUid
	}
	return 0
}

func (x *WatchCollectionsResponse) GetScopes() []*WatchCollectionsResponse_Scope {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type GetDocumentRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	BucketName     string                 `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	ScopeName      string                 `protobuf:"bytes,2,opt,name=scope_name,json=scopeName,proto3" json:"scope_name,omitempty"`
	CollectionName string                 `protobuf:"bytes,3,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Key            string                 `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	IncludeContent bool                   `protobuf:"varint,6,opt,name=include_content,json=includeContent,proto3" json:"include_content,omitempty"`
	IncludeXattrs  *bool                  `protobuf:"varint,7,opt,name=include_xattrs,json=includeXattrs,proto3,oneof" json:"include_xattrs,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetDocumentRequest) Reset() {
	*x = GetDocumentRequest{}
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocumentRequest) ProtoMessage() {}

func (x *GetDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocumentRequest.ProtoReflect.Descriptor instead.
func (*GetDocumentRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescGZIP(), []int{10}
}

func (x *GetDocumentRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *GetDocumentRequest) GetScopeName() string {
	if x != nil {
		return x.ScopeName
	}
	return ""
}

func (x *GetDocumentRequest) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *GetDocumentRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetDocumentRequest) GetIncludeContent() bool {
	if x != nil {
		return x.IncludeContent
	}
	return false
}

func (x *GetDocumentRequest) GetIncludeXattrs() bool {
	if x != nil && x.IncludeXattrs != nil {
		return *x.IncludeXattrs
	}
	return false
}

type GetDocumentResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Cas               uint64                 `protobuf:"varint,1,opt,name=cas,proto3" json:"cas,omitempty"`
	Expiry            *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
	IsDeleted         bool                   `protobuf:"varint,3,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	Datatype          uint32                 `protobuf:"varint,5,opt,name=datatype,proto3" json:"datatype,omitempty"`
	ContentFlags      uint32                 `protobuf:"varint,6,opt,name=content_flags,json=contentFlags,proto3" json:"content_flags,omitempty"`
	ContentCompressed []byte                 `protobuf:"bytes,7,opt,name=content_compressed,json=contentCompressed,proto3,oneof" json:"content_compressed,omitempty"`
	Revno             uint64                 `protobuf:"varint,8,opt,name=revno,proto3" json:"revno,omitempty"`
	Xattrs            map[string][]byte      `protobuf:"bytes,9,rep,name=xattrs,proto3" json:"xattrs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetDocumentResponse) Reset() {
	*x = GetDocumentResponse{}
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocumentResponse) ProtoMessage() {}

func (x *GetDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocumentResponse.ProtoReflect.Descriptor instead.
func (*GetDocumentResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescGZIP(), []int{11}
}

func (x *GetDocumentResponse) GetCas() uint64 {
	if x != nil {
		return x.Cas
	}
	return 0
}

func (x *GetDocumentResponse) GetExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

func (x *GetDocumentResponse) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *GetDocumentResponse) GetDatatype() uint32 {
	if x != nil {
		return x.Datatype
	}
	return 0
}

func (x *GetDocumentResponse) GetContentFlags() uint32 {
	if x != nil {
		return x.ContentFlags
	}
	return 0
}

func (x *GetDocumentResponse) GetContentCompressed() []byte {
	if x != nil {
		return x.ContentCompressed
	}
	return nil
}

func (x *GetDocumentResponse) GetRevno() uint64 {
	if x != nil {
		return x.Revno
	}
	return 0
}

func (x *GetDocumentResponse) GetXattrs() map[string][]byte {
	if x != nil {
		return x.Xattrs
	}
	return nil
}

type CheckDocumentRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	BucketName     string                 `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	ScopeName      string                 `protobuf:"bytes,2,opt,name=scope_name,json=scopeName,proto3" json:"scope_name,omitempty"`
	CollectionName string                 `protobuf:"bytes,3,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Key            string                 `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	// check_cas from PushDocument
	StoreCas     uint64 `protobuf:"varint,5,opt,name=store_cas,json=storeCas,proto3" json:"store_cas,omitempty"`
	Revno        uint64 `protobuf:"varint,6,opt,name=revno,proto3" json:"revno,omitempty"`
	ContentFlags uint32 `protobuf:"varint,7,opt,name=content_flags,json=contentFlags,proto3" json:"content_flags,omitempty"`
	// content_type from PushDocument
	// content from PushDocument
	HasXattrs     bool                   `protobuf:"varint,8,opt,name=has_xattrs,json=hasXattrs,proto3" json:"has_xattrs,omitempty"`
	ExpiryTime    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=expiry_time,json=expiryTime,proto3,oneof" json:"expiry_time,omitempty"`
	IsDeleted     bool                   `protobuf:"varint,10,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckDocumentRequest) Reset() {
	*x = CheckDocumentRequest{}
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDocumentRequest) ProtoMessage() {}

func (x *CheckDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDocumentRequest.ProtoReflect.Descriptor instead.
func (*CheckDocumentRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescGZIP(), []int{12}
}

func (x *CheckDocumentRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *CheckDocumentRequest) GetScopeName() string {
	if x != nil {
		return x.ScopeName
	}
	return ""
}

func (x *CheckDocumentRequest) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *CheckDocumentRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CheckDocumentRequest) GetStoreCas() uint64 {
	if x != nil {
		return x.StoreCas
	}
	return 0
}

func (x *CheckDocumentRequest) GetRevno() uint64 {
	if x != nil {
		return x.Revno
	}
	return 0
}

func (x *CheckDocumentRequest) GetContentFlags() uint32 {
	if x != nil {
		return x.ContentFlags
	}
	return 0
}

func (x *CheckDocumentRequest) GetHasXattrs() bool {
	if x != nil {
		return x.HasXattrs
	}
	return false
}

func (x *CheckDocumentRequest) GetExpiryTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryTime
	}
	return nil
}

func (x *CheckDocumentRequest) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

type CheckDocumentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exists        bool                   `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckDocumentResponse) Reset() {
	*x = CheckDocumentResponse{}
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckDocumentResponse) ProtoMessage() {}

func (x *CheckDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckDocumentResponse.ProtoReflect.Descriptor instead.
func (*CheckDocumentResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescGZIP(), []int{13}
}

func (x *CheckDocumentResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type PushDocumentRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	BucketName     string                 `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	ScopeName      string                 `protobuf:"bytes,2,opt,name=scope_name,json=scopeName,proto3" json:"scope_name,omitempty"`
	CollectionName string                 `protobuf:"bytes,3,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Key            string                 `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	CheckCas       *uint64                `protobuf:"varint,5,opt,name=check_cas,json=checkCas,proto3,oneof" json:"check_cas,omitempty"`
	StoreCas       uint64                 `protobuf:"varint,6,opt,name=store_cas,json=storeCas,proto3" json:"store_cas,omitempty"`
	Revno          uint64                 `protobuf:"varint,7,opt,name=revno,proto3" json:"revno,omitempty"`
	ContentFlags   uint32                 `protobuf:"varint,8,opt,name=content_flags,json=contentFlags,proto3" json:"content_flags,omitempty"`
	ContentType    ContentType            `protobuf:"varint,9,opt,name=content_type,json=contentType,proto3,enum=couchbase.internal.xdcr.v1.ContentType" json:"content_type,omitempty"`
	// Types that are valid to be assigned to Content:
	//
	//	*PushDocumentRequest_ContentUncompressed
	//	*PushDocumentRequest_ContentCompressed
	Content    isPushDocumentRequest_Content `protobuf_oneof:"content"`
	Xattrs     map[string][]byte             `protobuf:"bytes,16,rep,name=xattrs,proto3" json:"xattrs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ExpiryTime *timestamppb.Timestamp        `protobuf:"bytes,11,opt,name=expiry_time,json=expiryTime,proto3,oneof" json:"expiry_time,omitempty"`
	IsDeleted  bool                          `protobuf:"varint,12,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	// this covers disambiguating cluster_uuid, bucket_uuid, etc...
	VbUuid        *string `protobuf:"bytes,13,opt,name=vb_uuid,json=vbUuid,proto3,oneof" json:"vb_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushDocumentRequest) Reset() {
	*x = PushDocumentRequest{}
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushDocumentRequest) ProtoMessage() {}

func (x *PushDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushDocumentRequest.ProtoReflect.Descriptor instead.
func (*PushDocumentRequest) Descriptor() ([]byte, []int) {
	return file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescGZIP(), []int{14}
}

func (x *PushDocumentRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *PushDocumentRequest) GetScopeName() string {
	if x != nil {
		return x.ScopeName
	}
	return ""
}

func (x *PushDocumentRequest) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

func (x *PushDocumentRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PushDocumentRequest) GetCheckCas() uint64 {
	if x != nil && x.CheckCas != nil {
		return *x.CheckCas
	}
	return 0
}

func (x *PushDocumentRequest) GetStoreCas() uint64 {
	if x != nil {
		return x.StoreCas
	}
	return 0
}

func (x *PushDocumentRequest) GetRevno() uint64 {
	if x != nil {
		return x.Revno
	}
	return 0
}

func (x *PushDocumentRequest) GetContentFlags() uint32 {
	if x != nil {
		return x.ContentFlags
	}
	return 0
}

func (x *PushDocumentRequest) GetContentType() ContentType {
	if x != nil {
		return x.ContentType
	}
	return ContentType_CONTENT_TYPE_NONJSON
}

func (x *PushDocumentRequest) GetContent() isPushDocumentRequest_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *PushDocumentRequest) GetContentUncompressed() []byte {
	if x != nil {
		if x, ok := x.Content.(*PushDocumentRequest_ContentUncompressed); ok {
			return x.ContentUncompressed
		}
	}
	return nil
}

func (x *PushDocumentRequest) GetContentCompressed() []byte {
	if x != nil {
		if x, ok := x.Content.(*PushDocumentRequest_ContentCompressed); ok {
			return x.ContentCompressed
		}
	}
	return nil
}

func (x *PushDocumentRequest) GetXattrs() map[string][]byte {
	if x != nil {
		return x.Xattrs
	}
	return nil
}

func (x *PushDocumentRequest) GetExpiryTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiryTime
	}
	return nil
}

func (x *PushDocumentRequest) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *PushDocumentRequest) GetVbUuid() string {
	if x != nil && x.VbUuid != nil {
		return *x.VbUuid
	}
	return ""
}

type isPushDocumentRequest_Content interface {
	isPushDocumentRequest_Content()
}

type PushDocumentRequest_ContentUncompressed struct {
	ContentUncompressed []byte `protobuf:"bytes,15,opt,name=content_uncompressed,json=contentUncompressed,proto3,oneof"`
}

type PushDocumentRequest_ContentCompressed struct {
	ContentCompressed []byte `protobuf:"bytes,10,opt,name=content_compressed,json=contentCompressed,proto3,oneof"`
}

func (*PushDocumentRequest_ContentUncompressed) isPushDocumentRequest_Content() {}

func (*PushDocumentRequest_ContentCompressed) isPushDocumentRequest_Content() {}

type PushDocumentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cas           uint64                 `protobuf:"varint,1,opt,name=cas,proto3" json:"cas,omitempty"`
	Seqno         uint64                 `protobuf:"varint,2,opt,name=seqno,proto3" json:"seqno,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushDocumentResponse) Reset() {
	*x = PushDocumentResponse{}
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushDocumentResponse) ProtoMessage() {}

func (x *PushDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushDocumentResponse.ProtoReflect.Descriptor instead.
func (*PushDocumentResponse) Descriptor() ([]byte, []int) {
	return file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescGZIP(), []int{15}
}

func (x *PushDocumentResponse) GetCas() uint64 {
	if x != nil {
		return x.Cas
	}
	return 0
}

func (x *PushDocumentResponse) GetSeqno() uint64 {
	if x != nil {
		return x.Seqno
	}
	return 0
}

type GetVbucketInfoResponse_HistoryEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          uint64                 `protobuf:"varint,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Seqno         uint64                 `protobuf:"varint,2,opt,name=seqno,proto3" json:"seqno,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVbucketInfoResponse_HistoryEntry) Reset() {
	*x = GetVbucketInfoResponse_HistoryEntry{}
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVbucketInfoResponse_HistoryEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVbucketInfoResponse_HistoryEntry) ProtoMessage() {}

func (x *GetVbucketInfoResponse_HistoryEntry) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVbucketInfoResponse_HistoryEntry.ProtoReflect.Descriptor instead.
func (*GetVbucketInfoResponse_HistoryEntry) Descriptor() ([]byte, []int) {
	return file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescGZIP(), []int{7, 0}
}

func (x *GetVbucketInfoResponse_HistoryEntry) GetUuid() uint64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *GetVbucketInfoResponse_HistoryEntry) GetSeqno() uint64 {
	if x != nil {
		return x.Seqno
	}
	return 0
}

type GetVbucketInfoResponse_VbucketState struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	VbucketId     uint32                                 `protobuf:"varint,1,opt,name=vbucket_id,json=vbucketId,proto3" json:"vbucket_id,omitempty"`
	Uuid          uint64                                 `protobuf:"varint,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	HighSeqno     uint64                                 `protobuf:"varint,3,opt,name=high_seqno,json=highSeqno,proto3" json:"high_seqno,omitempty"`
	History       []*GetVbucketInfoResponse_HistoryEntry `protobuf:"bytes,4,rep,name=history,proto3" json:"history,omitempty"`
	MaxCas        *uint64                                `protobuf:"varint,5,opt,name=max_cas,json=maxCas,proto3,oneof" json:"max_cas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVbucketInfoResponse_VbucketState) Reset() {
	*x = GetVbucketInfoResponse_VbucketState{}
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVbucketInfoResponse_VbucketState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVbucketInfoResponse_VbucketState) ProtoMessage() {}

func (x *GetVbucketInfoResponse_VbucketState) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVbucketInfoResponse_VbucketState.ProtoReflect.Descriptor instead.
func (*GetVbucketInfoResponse_VbucketState) Descriptor() ([]byte, []int) {
	return file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescGZIP(), []int{7, 1}
}

func (x *GetVbucketInfoResponse_VbucketState) GetVbucketId() uint32 {
	if x != nil {
		return x.VbucketId
	}
	return 0
}

func (x *GetVbucketInfoResponse_VbucketState) GetUuid() uint64 {
	if x != nil {
		return x.Uuid
	}
	return 0
}

func (x *GetVbucketInfoResponse_VbucketState) GetHighSeqno() uint64 {
	if x != nil {
		return x.HighSeqno
	}
	return 0
}

func (x *GetVbucketInfoResponse_VbucketState) GetHistory() []*GetVbucketInfoResponse_HistoryEntry {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *GetVbucketInfoResponse_VbucketState) GetMaxCas() uint64 {
	if x != nil && x.MaxCas != nil {
		return *x.MaxCas
	}
	return 0
}

type WatchCollectionsResponse_Collection struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CollectionId   uint32                 `protobuf:"varint,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	CollectionName string                 `protobuf:"bytes,2,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WatchCollectionsResponse_Collection) Reset() {
	*x = WatchCollectionsResponse_Collection{}
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchCollectionsResponse_Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchCollectionsResponse_Collection) ProtoMessage() {}

func (x *WatchCollectionsResponse_Collection) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchCollectionsResponse_Collection.ProtoReflect.Descriptor instead.
func (*WatchCollectionsResponse_Collection) Descriptor() ([]byte, []int) {
	return file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescGZIP(), []int{9, 0}
}

func (x *WatchCollectionsResponse_Collection) GetCollectionId() uint32 {
	if x != nil {
		return x.CollectionId
	}
	return 0
}

func (x *WatchCollectionsResponse_Collection) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

type WatchCollectionsResponse_Scope struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	ScopeId       uint32                                 `protobuf:"varint,1,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty"`
	ScopeName     string                                 `protobuf:"bytes,2,opt,name=scope_name,json=scopeName,proto3" json:"scope_name,omitempty"`
	Collections   []*WatchCollectionsResponse_Collection `protobuf:"bytes,3,rep,name=collections,proto3" json:"collections,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchCollectionsResponse_Scope) Reset() {
	*x = WatchCollectionsResponse_Scope{}
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchCollectionsResponse_Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchCollectionsResponse_Scope) ProtoMessage() {}

func (x *WatchCollectionsResponse_Scope) ProtoReflect() protoreflect.Message {
	mi := &file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchCollectionsResponse_Scope.ProtoReflect.Descriptor instead.
func (*WatchCollectionsResponse_Scope) Descriptor() ([]byte, []int) {
	return file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescGZIP(), []int{9, 1}
}

func (x *WatchCollectionsResponse_Scope) GetScopeId() uint32 {
	if x != nil {
		return x.ScopeId
	}
	return 0
}

func (x *WatchCollectionsResponse_Scope) GetScopeName() string {
	if x != nil {
		return x.ScopeName
	}
	return ""
}

func (x *WatchCollectionsResponse_Scope) GetCollections() []*WatchCollectionsResponse_Collection {
	if x != nil {
		return x.Collections
	}
	return nil
}

var File_couchbase_internal_xdcr_v1_xdcr_proto protoreflect.FileDescriptor

const file_couchbase_internal_xdcr_v1_xdcr_proto_rawDesc = "" +
	"\n" +
	"%couchbase/internal/xdcr/v1/xdcr.proto\x12\x1acouchbase.internal.xdcr.v1\x1a\x1fgoogle/protobuf/timestamp.proto\",\n" +
	"\x10HeartbeatRequest\x12\x18\n" +
	"\apayload\x18\x01 \x01(\fR\apayload\"\x13\n" +
	"\x11HeartbeatResponse\"\x17\n" +
	"\x15GetClusterInfoRequest\";\n" +
	"\x16GetClusterInfoResponse\x12!\n" +
	"\fcluster_uuid\x18\x01 \x01(\tR\vclusterUuid\"7\n" +
	"\x14GetBucketInfoRequest\x12\x1f\n" +
	"\vbucket_name\x18\x01 \x01(\tR\n" +
	"bucketName\"\x92\x02\n" +
	"\x15GetBucketInfoResponse\x12\x1f\n" +
	"\vbucket_uuid\x18\x02 \x01(\tR\n" +
	"bucketUuid\x12!\n" +
	"\fnum_vbuckets\x18\x03 \x01(\rR\vnumVbuckets\x12l\n" +
	"\x18conflict_resolution_type\x18\x04 \x01(\x0e22.couchbase.internal.xdcr.v1.ConflictResolutionTypeR\x16conflictResolutionType\x12G\n" +
	" cross_cluster_versioning_enabled\x18\x05 \x01(\bR\x1dcrossClusterVersioningEnabled\"\xdc\x01\n" +
	"\x15GetVbucketInfoRequest\x12\x1f\n" +
	"\vbucket_name\x18\x01 \x01(\tR\n" +
	"bucketName\x12\x1f\n" +
	"\vvbucket_ids\x18\x02 \x03(\rR\n" +
	"vbucketIds\x12,\n" +
	"\x0finclude_history\x18\x03 \x01(\bH\x00R\x0eincludeHistory\x88\x01\x01\x12+\n" +
	"\x0finclude_max_cas\x18\x04 \x01(\bH\x01R\rincludeMaxCas\x88\x01\x01B\x12\n" +
	"\x10_include_historyB\x12\n" +
	"\x10_include_max_cas\"\x97\x03\n" +
	"\x16GetVbucketInfoResponse\x12[\n" +
	"\bvbuckets\x18\x02 \x03(\v2?.couchbase.internal.xdcr.v1.GetVbucketInfoResponse.VbucketStateR\bvbuckets\x1a8\n" +
	"\fHistoryEntry\x12\x12\n" +
	"\x04uuid\x18\x01 \x01(\x04R\x04uuid\x12\x14\n" +
	"\x05seqno\x18\x02 \x01(\x04R\x05seqno\x1a\xe5\x01\n" +
	"\fVbucketState\x12\x1d\n" +
	"\n" +
	"vbucket_id\x18\x01 \x01(\rR\tvbucketId\x12\x12\n" +
	"\x04uuid\x18\x02 \x01(\x04R\x04uuid\x12\x1d\n" +
	"\n" +
	"high_seqno\x18\x03 \x01(\x04R\thighSeqno\x12Y\n" +
	"\ahistory\x18\x04 \x03(\v2?.couchbase.internal.xdcr.v1.GetVbucketInfoResponse.HistoryEntryR\ahistory\x12\x1c\n" +
	"\amax_cas\x18\x05 \x01(\x04H\x00R\x06maxCas\x88\x01\x01B\n" +
	"\n" +
	"\b_max_cas\":\n" +
	"\x17WatchCollectionsRequest\x12\x1f\n" +
	"\vbucket_name\x18\x01 \x01(\tR\n" +
	"bucketName\"\x94\x03\n" +
	"\x18WatchCollectionsResponse\x12!\n" +
	"\fmanifest_uid\x18\x01 \x01(\rR\vmanifestUid\x12R\n" +
	"\x06scopes\x18\x02 \x03(\v2:.couchbase.internal.xdcr.v1.WatchCollectionsResponse.ScopeR\x06scopes\x1aZ\n" +
	"\n" +
	"Collection\x12#\n" +
	"\rcollection_id\x18\x01 \x01(\rR\fcollectionId\x12'\n" +
	"\x0fcollection_name\x18\x02 \x01(\tR\x0ecollectionName\x1a\xa4\x01\n" +
	"\x05Scope\x12\x19\n" +
	"\bscope_id\x18\x01 \x01(\rR\ascopeId\x12\x1d\n" +
	"\n" +
	"scope_name\x18\x02 \x01(\tR\tscopeName\x12a\n" +
	"\vcollections\x18\x03 \x03(\v2?.couchbase.internal.xdcr.v1.WatchCollectionsResponse.CollectionR\vcollections\"\xf7\x01\n" +
	"\x12GetDocumentRequest\x12\x1f\n" +
	"\vbucket_name\x18\x01 \x01(\tR\n" +
	"bucketName\x12\x1d\n" +
	"\n" +
	"scope_name\x18\x02 \x01(\tR\tscopeName\x12'\n" +
	"\x0fcollection_name\x18\x03 \x01(\tR\x0ecollectionName\x12\x10\n" +
	"\x03key\x18\x05 \x01(\tR\x03key\x12'\n" +
	"\x0finclude_content\x18\x06 \x01(\bR\x0eincludeContent\x12*\n" +
	"\x0einclude_xattrs\x18\a \x01(\bH\x00R\rincludeXattrs\x88\x01\x01B\x11\n" +
	"\x0f_include_xattrs\"\xac\x03\n" +
	"\x13GetDocumentResponse\x12\x10\n" +
	"\x03cas\x18\x01 \x01(\x04R\x03cas\x122\n" +
	"\x06expiry\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x06expiry\x12\x1d\n" +
	"\n" +
	"is_deleted\x18\x03 \x01(\bR\tisDeleted\x12\x1a\n" +
	"\bdatatype\x18\x05 \x01(\rR\bdatatype\x12#\n" +
	"\rcontent_flags\x18\x06 \x01(\rR\fcontentFlags\x122\n" +
	"\x12content_compressed\x18\a \x01(\fH\x00R\x11contentCompressed\x88\x01\x01\x12\x14\n" +
	"\x05revno\x18\b \x01(\x04R\x05revno\x12S\n" +
	"\x06xattrs\x18\t \x03(\v2;.couchbase.internal.xdcr.v1.GetDocumentResponse.XattrsEntryR\x06xattrs\x1a9\n" +
	"\vXattrsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01B\x15\n" +
	"\x13_content_compressed\"\xf9\x02\n" +
	"\x14CheckDocumentRequest\x12\x1f\n" +
	"\vbucket_name\x18\x01 \x01(\tR\n" +
	"bucketName\x12\x1d\n" +
	"\n" +
	"scope_name\x18\x02 \x01(\tR\tscopeName\x12'\n" +
	"\x0fcollection_name\x18\x03 \x01(\tR\x0ecollectionName\x12\x10\n" +
	"\x03key\x18\x04 \x01(\tR\x03key\x12\x1b\n" +
	"\tstore_cas\x18\x05 \x01(\x04R\bstoreCas\x12\x14\n" +
	"\x05revno\x18\x06 \x01(\x04R\x05revno\x12#\n" +
	"\rcontent_flags\x18\a \x01(\rR\fcontentFlags\x12\x1d\n" +
	"\n" +
	"has_xattrs\x18\b \x01(\bR\thasXattrs\x12@\n" +
	"\vexpiry_time\x18\t \x01(\v2\x1a.google.protobuf.TimestampH\x00R\n" +
	"expiryTime\x88\x01\x01\x12\x1d\n" +
	"\n" +
	"is_deleted\x18\n" +
	" \x01(\bR\tisDeletedB\x0e\n" +
	"\f_expiry_time\"/\n" +
	"\x15CheckDocumentResponse\x12\x16\n" +
	"\x06exists\x18\x01 \x01(\bR\x06exists\"\x80\x06\n" +
	"\x13PushDocumentRequest\x12\x1f\n" +
	"\vbucket_name\x18\x01 \x01(\tR\n" +
	"bucketName\x12\x1d\n" +
	"\n" +
	"scope_name\x18\x02 \x01(\tR\tscopeName\x12'\n" +
	"\x0fcollection_name\x18\x03 \x01(\tR\x0ecollectionName\x12\x10\n" +
	"\x03key\x18\x04 \x01(\tR\x03key\x12 \n" +
	"\tcheck_cas\x18\x05 \x01(\x04H\x01R\bcheckCas\x88\x01\x01\x12\x1b\n" +
	"\tstore_cas\x18\x06 \x01(\x04R\bstoreCas\x12\x14\n" +
	"\x05revno\x18\a \x01(\x04R\x05revno\x12#\n" +
	"\rcontent_flags\x18\b \x01(\rR\fcontentFlags\x12J\n" +
	"\fcontent_type\x18\t \x01(\x0e2'.couchbase.internal.xdcr.v1.ContentTypeR\vcontentType\x123\n" +
	"\x14content_uncompressed\x18\x0f \x01(\fH\x00R\x13contentUncompressed\x12/\n" +
	"\x12content_compressed\x18\n" +
	" \x01(\fH\x00R\x11contentCompressed\x12S\n" +
	"\x06xattrs\x18\x10 \x03(\v2;.couchbase.internal.xdcr.v1.PushDocumentRequest.XattrsEntryR\x06xattrs\x12@\n" +
	"\vexpiry_time\x18\v \x01(\v2\x1a.google.protobuf.TimestampH\x02R\n" +
	"expiryTime\x88\x01\x01\x12\x1d\n" +
	"\n" +
	"is_deleted\x18\f \x01(\bR\tisDeleted\x12\x1c\n" +
	"\avb_uuid\x18\r \x01(\tH\x03R\x06vbUuid\x88\x01\x01\x1a9\n" +
	"\vXattrsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01B\t\n" +
	"\acontentB\f\n" +
	"\n" +
	"_check_casB\x0e\n" +
	"\f_expiry_timeB\n" +
	"\n" +
	"\b_vb_uuid\">\n" +
	"\x14PushDocumentResponse\x12\x10\n" +
	"\x03cas\x18\x01 \x01(\x04R\x03cas\x12\x14\n" +
	"\x05seqno\x18\x02 \x01(\x04R\x05seqno*\x93\x01\n" +
	"\x16ConflictResolutionType\x12&\n" +
	"\"CONFLICT_RESOLUTION_TYPE_TIMESTAMP\x10\x00\x12,\n" +
	"(CONFLICT_RESOLUTION_TYPE_SEQUENCE_NUMBER\x10\x01\x12#\n" +
	"\x1fCONFLICT_RESOLUTION_TYPE_CUSTOM\x10\x02*>\n" +
	"\vContentType\x12\x18\n" +
	"\x14CONTENT_TYPE_NONJSON\x10\x00\x12\x15\n" +
	"\x11CONTENT_TYPE_JSON\x10\x012\xcc\a\n" +
	"\vXdcrService\x12j\n" +
	"\tHeartbeat\x12,.couchbase.internal.xdcr.v1.HeartbeatRequest\x1a-.couchbase.internal.xdcr.v1.HeartbeatResponse\"\x00\x12y\n" +
	"\x0eGetClusterInfo\x121.couchbase.internal.xdcr.v1.GetClusterInfoRequest\x1a2.couchbase.internal.xdcr.v1.GetClusterInfoResponse\"\x00\x12v\n" +
	"\rGetBucketInfo\x120.couchbase.internal.xdcr.v1.GetBucketInfoRequest\x1a1.couchbase.internal.xdcr.v1.GetBucketInfoResponse\"\x00\x12{\n" +
	"\x0eGetVbucketInfo\x121.couchbase.internal.xdcr.v1.GetVbucketInfoRequest\x1a2.couchbase.internal.xdcr.v1.GetVbucketInfoResponse\"\x000\x01\x12\x81\x01\n" +
	"\x10WatchCollections\x123.couchbase.internal.xdcr.v1.WatchCollectionsRequest\x1a4.couchbase.internal.xdcr.v1.WatchCollectionsResponse\"\x000\x01\x12p\n" +
	"\vGetDocument\x12..couchbase.internal.xdcr.v1.GetDocumentRequest\x1a/.couchbase.internal.xdcr.v1.GetDocumentResponse\"\x00\x12v\n" +
	"\rCheckDocument\x120.couchbase.internal.xdcr.v1.CheckDocumentRequest\x1a1.couchbase.internal.xdcr.v1.CheckDocumentResponse\"\x00\x12s\n" +
	"\fPushDocument\x12/.couchbase.internal.xdcr.v1.PushDocumentRequest\x1a0.couchbase.internal.xdcr.v1.PushDocumentResponse\"\x00BPZNgithub.com/couchbase/goprotostellar/genproto/internal_xdcr_v1;internal_xdcr_v1b\x06proto3"

var (
	file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescOnce sync.Once
	file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescData []byte
)

func file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescGZIP() []byte {
	file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescOnce.Do(func() {
		file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_couchbase_internal_xdcr_v1_xdcr_proto_rawDesc), len(file_couchbase_internal_xdcr_v1_xdcr_proto_rawDesc)))
	})
	return file_couchbase_internal_xdcr_v1_xdcr_proto_rawDescData
}

var file_couchbase_internal_xdcr_v1_xdcr_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_couchbase_internal_xdcr_v1_xdcr_proto_goTypes = []any{
	(ConflictResolutionType)(0),                 // 0: couchbase.internal.xdcr.v1.ConflictResolutionType
	(ContentType)(0),                            // 1: couchbase.internal.xdcr.v1.ContentType
	(*HeartbeatRequest)(nil),                    // 2: couchbase.internal.xdcr.v1.HeartbeatRequest
	(*HeartbeatResponse)(nil),                   // 3: couchbase.internal.xdcr.v1.HeartbeatResponse
	(*GetClusterInfoRequest)(nil),               // 4: couchbase.internal.xdcr.v1.GetClusterInfoRequest
	(*GetClusterInfoResponse)(nil),              // 5: couchbase.internal.xdcr.v1.GetClusterInfoResponse
	(*GetBucketInfoRequest)(nil),                // 6: couchbase.internal.xdcr.v1.GetBucketInfoRequest
	(*GetBucketInfoResponse)(nil),               // 7: couchbase.internal.xdcr.v1.GetBucketInfoResponse
	(*GetVbucketInfoRequest)(nil),               // 8: couchbase.internal.xdcr.v1.GetVbucketInfoRequest
	(*GetVbucketInfoResponse)(nil),              // 9: couchbase.internal.xdcr.v1.GetVbucketInfoResponse
	(*WatchCollectionsRequest)(nil),             // 10: couchbase.internal.xdcr.v1.WatchCollectionsRequest
	(*WatchCollectionsResponse)(nil),            // 11: couchbase.internal.xdcr.v1.WatchCollectionsResponse
	(*GetDocumentRequest)(nil),                  // 12: couchbase.internal.xdcr.v1.GetDocumentRequest
	(*GetDocumentResponse)(nil),                 // 13: couchbase.internal.xdcr.v1.GetDocumentResponse
	(*CheckDocumentRequest)(nil),                // 14: couchbase.internal.xdcr.v1.CheckDocumentRequest
	(*CheckDocumentResponse)(nil),               // 15: couchbase.internal.xdcr.v1.CheckDocumentResponse
	(*PushDocumentRequest)(nil),                 // 16: couchbase.internal.xdcr.v1.PushDocumentRequest
	(*PushDocumentResponse)(nil),                // 17: couchbase.internal.xdcr.v1.PushDocumentResponse
	(*GetVbucketInfoResponse_HistoryEntry)(nil), // 18: couchbase.internal.xdcr.v1.GetVbucketInfoResponse.HistoryEntry
	(*GetVbucketInfoResponse_VbucketState)(nil), // 19: couchbase.internal.xdcr.v1.GetVbucketInfoResponse.VbucketState
	(*WatchCollectionsResponse_Collection)(nil), // 20: couchbase.internal.xdcr.v1.WatchCollectionsResponse.Collection
	(*WatchCollectionsResponse_Scope)(nil),      // 21: couchbase.internal.xdcr.v1.WatchCollectionsResponse.Scope
	nil,                                         // 22: couchbase.internal.xdcr.v1.GetDocumentResponse.XattrsEntry
	nil,                                         // 23: couchbase.internal.xdcr.v1.PushDocumentRequest.XattrsEntry
	(*timestamppb.Timestamp)(nil),               // 24: google.protobuf.Timestamp
}
var file_couchbase_internal_xdcr_v1_xdcr_proto_depIdxs = []int32{
	0,  // 0: couchbase.internal.xdcr.v1.GetBucketInfoResponse.conflict_resolution_type:type_name -> couchbase.internal.xdcr.v1.ConflictResolutionType
	19, // 1: couchbase.internal.xdcr.v1.GetVbucketInfoResponse.vbuckets:type_name -> couchbase.internal.xdcr.v1.GetVbucketInfoResponse.VbucketState
	21, // 2: couchbase.internal.xdcr.v1.WatchCollectionsResponse.scopes:type_name -> couchbase.internal.xdcr.v1.WatchCollectionsResponse.Scope
	24, // 3: couchbase.internal.xdcr.v1.GetDocumentResponse.expiry:type_name -> google.protobuf.Timestamp
	22, // 4: couchbase.internal.xdcr.v1.GetDocumentResponse.xattrs:type_name -> couchbase.internal.xdcr.v1.GetDocumentResponse.XattrsEntry
	24, // 5: couchbase.internal.xdcr.v1.CheckDocumentRequest.expiry_time:type_name -> google.protobuf.Timestamp
	1,  // 6: couchbase.internal.xdcr.v1.PushDocumentRequest.content_type:type_name -> couchbase.internal.xdcr.v1.ContentType
	23, // 7: couchbase.internal.xdcr.v1.PushDocumentRequest.xattrs:type_name -> couchbase.internal.xdcr.v1.PushDocumentRequest.XattrsEntry
	24, // 8: couchbase.internal.xdcr.v1.PushDocumentRequest.expiry_time:type_name -> google.protobuf.Timestamp
	18, // 9: couchbase.internal.xdcr.v1.GetVbucketInfoResponse.VbucketState.history:type_name -> couchbase.internal.xdcr.v1.GetVbucketInfoResponse.HistoryEntry
	20, // 10: couchbase.internal.xdcr.v1.WatchCollectionsResponse.Scope.collections:type_name -> couchbase.internal.xdcr.v1.WatchCollectionsResponse.Collection
	2,  // 11: couchbase.internal.xdcr.v1.XdcrService.Heartbeat:input_type -> couchbase.internal.xdcr.v1.HeartbeatRequest
	4,  // 12: couchbase.internal.xdcr.v1.XdcrService.GetClusterInfo:input_type -> couchbase.internal.xdcr.v1.GetClusterInfoRequest
	6,  // 13: couchbase.internal.xdcr.v1.XdcrService.GetBucketInfo:input_type -> couchbase.internal.xdcr.v1.GetBucketInfoRequest
	8,  // 14: couchbase.internal.xdcr.v1.XdcrService.GetVbucketInfo:input_type -> couchbase.internal.xdcr.v1.GetVbucketInfoRequest
	10, // 15: couchbase.internal.xdcr.v1.XdcrService.WatchCollections:input_type -> couchbase.internal.xdcr.v1.WatchCollectionsRequest
	12, // 16: couchbase.internal.xdcr.v1.XdcrService.GetDocument:input_type -> couchbase.internal.xdcr.v1.GetDocumentRequest
	14, // 17: couchbase.internal.xdcr.v1.XdcrService.CheckDocument:input_type -> couchbase.internal.xdcr.v1.CheckDocumentRequest
	16, // 18: couchbase.internal.xdcr.v1.XdcrService.PushDocument:input_type -> couchbase.internal.xdcr.v1.PushDocumentRequest
	3,  // 19: couchbase.internal.xdcr.v1.XdcrService.Heartbeat:output_type -> couchbase.internal.xdcr.v1.HeartbeatResponse
	5,  // 20: couchbase.internal.xdcr.v1.XdcrService.GetClusterInfo:output_type -> couchbase.internal.xdcr.v1.GetClusterInfoResponse
	7,  // 21: couchbase.internal.xdcr.v1.XdcrService.GetBucketInfo:output_type -> couchbase.internal.xdcr.v1.GetBucketInfoResponse
	9,  // 22: couchbase.internal.xdcr.v1.XdcrService.GetVbucketInfo:output_type -> couchbase.internal.xdcr.v1.GetVbucketInfoResponse
	11, // 23: couchbase.internal.xdcr.v1.XdcrService.WatchCollections:output_type -> couchbase.internal.xdcr.v1.WatchCollectionsResponse
	13, // 24: couchbase.internal.xdcr.v1.XdcrService.GetDocument:output_type -> couchbase.internal.xdcr.v1.GetDocumentResponse
	15, // 25: couchbase.internal.xdcr.v1.XdcrService.CheckDocument:output_type -> couchbase.internal.xdcr.v1.CheckDocumentResponse
	17, // 26: couchbase.internal.xdcr.v1.XdcrService.PushDocument:output_type -> couchbase.internal.xdcr.v1.PushDocumentResponse
	19, // [19:27] is the sub-list for method output_type
	11, // [11:19] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_couchbase_internal_xdcr_v1_xdcr_proto_init() }
func file_couchbase_internal_xdcr_v1_xdcr_proto_init() {
	if File_couchbase_internal_xdcr_v1_xdcr_proto != nil {
		return
	}
	file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[6].OneofWrappers = []any{}
	file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[10].OneofWrappers = []any{}
	file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[11].OneofWrappers = []any{}
	file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[12].OneofWrappers = []any{}
	file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[14].OneofWrappers = []any{
		(*PushDocumentRequest_ContentUncompressed)(nil),
		(*PushDocumentRequest_ContentCompressed)(nil),
	}
	file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes[17].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_couchbase_internal_xdcr_v1_xdcr_proto_rawDesc), len(file_couchbase_internal_xdcr_v1_xdcr_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_couchbase_internal_xdcr_v1_xdcr_proto_goTypes,
		DependencyIndexes: file_couchbase_internal_xdcr_v1_xdcr_proto_depIdxs,
		EnumInfos:         file_couchbase_internal_xdcr_v1_xdcr_proto_enumTypes,
		MessageInfos:      file_couchbase_internal_xdcr_v1_xdcr_proto_msgTypes,
	}.Build()
	File_couchbase_internal_xdcr_v1_xdcr_proto = out.File
	file_couchbase_internal_xdcr_v1_xdcr_proto_goTypes = nil
	file_couchbase_internal_xdcr_v1_xdcr_proto_depIdxs = nil
}
