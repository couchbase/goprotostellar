// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: couchbase/transactions/v1/transactions.proto

package transactions_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionsService_TransactionBeginAttempt_FullMethodName = "/couchbase.transactions.v1.TransactionsService/TransactionBeginAttempt"
	TransactionsService_TransactionCommit_FullMethodName       = "/couchbase.transactions.v1.TransactionsService/TransactionCommit"
	TransactionsService_TransactionRollback_FullMethodName     = "/couchbase.transactions.v1.TransactionsService/TransactionRollback"
	TransactionsService_TransactionGet_FullMethodName          = "/couchbase.transactions.v1.TransactionsService/TransactionGet"
	TransactionsService_TransactionInsert_FullMethodName       = "/couchbase.transactions.v1.TransactionsService/TransactionInsert"
	TransactionsService_TransactionReplace_FullMethodName      = "/couchbase.transactions.v1.TransactionsService/TransactionReplace"
	TransactionsService_TransactionRemove_FullMethodName       = "/couchbase.transactions.v1.TransactionsService/TransactionRemove"
)

// TransactionsServiceClient is the client API for TransactionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionsServiceClient interface {
	TransactionBeginAttempt(ctx context.Context, in *TransactionBeginAttemptRequest, opts ...grpc.CallOption) (*TransactionBeginAttemptResponse, error)
	TransactionCommit(ctx context.Context, in *TransactionCommitRequest, opts ...grpc.CallOption) (*TransactionCommitResponse, error)
	TransactionRollback(ctx context.Context, in *TransactionRollbackRequest, opts ...grpc.CallOption) (*TransactionRollbackResponse, error)
	TransactionGet(ctx context.Context, in *TransactionGetRequest, opts ...grpc.CallOption) (*TransactionGetResponse, error)
	TransactionInsert(ctx context.Context, in *TransactionInsertRequest, opts ...grpc.CallOption) (*TransactionInsertResponse, error)
	TransactionReplace(ctx context.Context, in *TransactionReplaceRequest, opts ...grpc.CallOption) (*TransactionReplaceResponse, error)
	TransactionRemove(ctx context.Context, in *TransactionRemoveRequest, opts ...grpc.CallOption) (*TransactionRemoveResponse, error)
}

type transactionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionsServiceClient(cc grpc.ClientConnInterface) TransactionsServiceClient {
	return &transactionsServiceClient{cc}
}

func (c *transactionsServiceClient) TransactionBeginAttempt(ctx context.Context, in *TransactionBeginAttemptRequest, opts ...grpc.CallOption) (*TransactionBeginAttemptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionBeginAttemptResponse)
	err := c.cc.Invoke(ctx, TransactionsService_TransactionBeginAttempt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServiceClient) TransactionCommit(ctx context.Context, in *TransactionCommitRequest, opts ...grpc.CallOption) (*TransactionCommitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionCommitResponse)
	err := c.cc.Invoke(ctx, TransactionsService_TransactionCommit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServiceClient) TransactionRollback(ctx context.Context, in *TransactionRollbackRequest, opts ...grpc.CallOption) (*TransactionRollbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionRollbackResponse)
	err := c.cc.Invoke(ctx, TransactionsService_TransactionRollback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServiceClient) TransactionGet(ctx context.Context, in *TransactionGetRequest, opts ...grpc.CallOption) (*TransactionGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionGetResponse)
	err := c.cc.Invoke(ctx, TransactionsService_TransactionGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServiceClient) TransactionInsert(ctx context.Context, in *TransactionInsertRequest, opts ...grpc.CallOption) (*TransactionInsertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionInsertResponse)
	err := c.cc.Invoke(ctx, TransactionsService_TransactionInsert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServiceClient) TransactionReplace(ctx context.Context, in *TransactionReplaceRequest, opts ...grpc.CallOption) (*TransactionReplaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionReplaceResponse)
	err := c.cc.Invoke(ctx, TransactionsService_TransactionReplace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionsServiceClient) TransactionRemove(ctx context.Context, in *TransactionRemoveRequest, opts ...grpc.CallOption) (*TransactionRemoveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionRemoveResponse)
	err := c.cc.Invoke(ctx, TransactionsService_TransactionRemove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionsServiceServer is the server API for TransactionsService service.
// All implementations must embed UnimplementedTransactionsServiceServer
// for forward compatibility.
type TransactionsServiceServer interface {
	TransactionBeginAttempt(context.Context, *TransactionBeginAttemptRequest) (*TransactionBeginAttemptResponse, error)
	TransactionCommit(context.Context, *TransactionCommitRequest) (*TransactionCommitResponse, error)
	TransactionRollback(context.Context, *TransactionRollbackRequest) (*TransactionRollbackResponse, error)
	TransactionGet(context.Context, *TransactionGetRequest) (*TransactionGetResponse, error)
	TransactionInsert(context.Context, *TransactionInsertRequest) (*TransactionInsertResponse, error)
	TransactionReplace(context.Context, *TransactionReplaceRequest) (*TransactionReplaceResponse, error)
	TransactionRemove(context.Context, *TransactionRemoveRequest) (*TransactionRemoveResponse, error)
	mustEmbedUnimplementedTransactionsServiceServer()
}

// UnimplementedTransactionsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionsServiceServer struct{}

func (UnimplementedTransactionsServiceServer) TransactionBeginAttempt(context.Context, *TransactionBeginAttemptRequest) (*TransactionBeginAttemptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionBeginAttempt not implemented")
}
func (UnimplementedTransactionsServiceServer) TransactionCommit(context.Context, *TransactionCommitRequest) (*TransactionCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionCommit not implemented")
}
func (UnimplementedTransactionsServiceServer) TransactionRollback(context.Context, *TransactionRollbackRequest) (*TransactionRollbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionRollback not implemented")
}
func (UnimplementedTransactionsServiceServer) TransactionGet(context.Context, *TransactionGetRequest) (*TransactionGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionGet not implemented")
}
func (UnimplementedTransactionsServiceServer) TransactionInsert(context.Context, *TransactionInsertRequest) (*TransactionInsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionInsert not implemented")
}
func (UnimplementedTransactionsServiceServer) TransactionReplace(context.Context, *TransactionReplaceRequest) (*TransactionReplaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionReplace not implemented")
}
func (UnimplementedTransactionsServiceServer) TransactionRemove(context.Context, *TransactionRemoveRequest) (*TransactionRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionRemove not implemented")
}
func (UnimplementedTransactionsServiceServer) mustEmbedUnimplementedTransactionsServiceServer() {}
func (UnimplementedTransactionsServiceServer) testEmbeddedByValue()                             {}

// UnsafeTransactionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionsServiceServer will
// result in compilation errors.
type UnsafeTransactionsServiceServer interface {
	mustEmbedUnimplementedTransactionsServiceServer()
}

func RegisterTransactionsServiceServer(s grpc.ServiceRegistrar, srv TransactionsServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransactionsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionsService_ServiceDesc, srv)
}

func _TransactionsService_TransactionBeginAttempt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionBeginAttemptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).TransactionBeginAttempt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsService_TransactionBeginAttempt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).TransactionBeginAttempt(ctx, req.(*TransactionBeginAttemptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsService_TransactionCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).TransactionCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsService_TransactionCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).TransactionCommit(ctx, req.(*TransactionCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsService_TransactionRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRollbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).TransactionRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsService_TransactionRollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).TransactionRollback(ctx, req.(*TransactionRollbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsService_TransactionGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).TransactionGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsService_TransactionGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).TransactionGet(ctx, req.(*TransactionGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsService_TransactionInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionInsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).TransactionInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsService_TransactionInsert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).TransactionInsert(ctx, req.(*TransactionInsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsService_TransactionReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).TransactionReplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsService_TransactionReplace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).TransactionReplace(ctx, req.(*TransactionReplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionsService_TransactionRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionsServiceServer).TransactionRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionsService_TransactionRemove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionsServiceServer).TransactionRemove(ctx, req.(*TransactionRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionsService_ServiceDesc is the grpc.ServiceDesc for TransactionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "couchbase.transactions.v1.TransactionsService",
	HandlerType: (*TransactionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransactionBeginAttempt",
			Handler:    _TransactionsService_TransactionBeginAttempt_Handler,
		},
		{
			MethodName: "TransactionCommit",
			Handler:    _TransactionsService_TransactionCommit_Handler,
		},
		{
			MethodName: "TransactionRollback",
			Handler:    _TransactionsService_TransactionRollback_Handler,
		},
		{
			MethodName: "TransactionGet",
			Handler:    _TransactionsService_TransactionGet_Handler,
		},
		{
			MethodName: "TransactionInsert",
			Handler:    _TransactionsService_TransactionInsert_Handler,
		},
		{
			MethodName: "TransactionReplace",
			Handler:    _TransactionsService_TransactionReplace_Handler,
		},
		{
			MethodName: "TransactionRemove",
			Handler:    _TransactionsService_TransactionRemove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "couchbase/transactions/v1/transactions.proto",
}
