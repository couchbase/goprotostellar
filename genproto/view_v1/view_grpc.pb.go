// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: couchbase/view/v1/view.proto

package view_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ViewService_ViewQuery_FullMethodName = "/couchbase.view.v1.ViewService/ViewQuery"
)

// ViewServiceClient is the client API for ViewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ViewServiceClient interface {
	ViewQuery(ctx context.Context, in *ViewQueryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ViewQueryResponse], error)
}

type viewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewViewServiceClient(cc grpc.ClientConnInterface) ViewServiceClient {
	return &viewServiceClient{cc}
}

func (c *viewServiceClient) ViewQuery(ctx context.Context, in *ViewQueryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ViewQueryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ViewService_ServiceDesc.Streams[0], ViewService_ViewQuery_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ViewQueryRequest, ViewQueryResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ViewService_ViewQueryClient = grpc.ServerStreamingClient[ViewQueryResponse]

// ViewServiceServer is the server API for ViewService service.
// All implementations must embed UnimplementedViewServiceServer
// for forward compatibility.
type ViewServiceServer interface {
	ViewQuery(*ViewQueryRequest, grpc.ServerStreamingServer[ViewQueryResponse]) error
	mustEmbedUnimplementedViewServiceServer()
}

// UnimplementedViewServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedViewServiceServer struct{}

func (UnimplementedViewServiceServer) ViewQuery(*ViewQueryRequest, grpc.ServerStreamingServer[ViewQueryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ViewQuery not implemented")
}
func (UnimplementedViewServiceServer) mustEmbedUnimplementedViewServiceServer() {}
func (UnimplementedViewServiceServer) testEmbeddedByValue()                     {}

// UnsafeViewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ViewServiceServer will
// result in compilation errors.
type UnsafeViewServiceServer interface {
	mustEmbedUnimplementedViewServiceServer()
}

func RegisterViewServiceServer(s grpc.ServiceRegistrar, srv ViewServiceServer) {
	// If the following call pancis, it indicates UnimplementedViewServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ViewService_ServiceDesc, srv)
}

func _ViewService_ViewQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ViewQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ViewServiceServer).ViewQuery(m, &grpc.GenericServerStream[ViewQueryRequest, ViewQueryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ViewService_ViewQueryServer = grpc.ServerStreamingServer[ViewQueryResponse]

// ViewService_ServiceDesc is the grpc.ServiceDesc for ViewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ViewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "couchbase.view.v1.ViewService",
	HandlerType: (*ViewServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ViewQuery",
			Handler:       _ViewService_ViewQuery_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "couchbase/view/v1/view.proto",
}
