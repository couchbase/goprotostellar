// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: couchbase/internal/hooks/v1/hooks.proto

package internal_hooks_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HooksServiceClient is the client API for HooksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HooksServiceClient interface {
	CreateHooksContext(ctx context.Context, in *CreateHooksContextRequest, opts ...grpc.CallOption) (*CreateHooksContextResponse, error)
	DestroyHooksContext(ctx context.Context, in *DestroyHooksContextRequest, opts ...grpc.CallOption) (*DestroyHooksContextResponse, error)
	AddHooks(ctx context.Context, in *AddHooksRequest, opts ...grpc.CallOption) (*AddHooksResponse, error)
	WatchBarrier(ctx context.Context, in *WatchBarrierRequest, opts ...grpc.CallOption) (HooksService_WatchBarrierClient, error)
	SignalBarrier(ctx context.Context, in *SignalBarrierRequest, opts ...grpc.CallOption) (*SignalBarrierResponse, error)
}

type hooksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHooksServiceClient(cc grpc.ClientConnInterface) HooksServiceClient {
	return &hooksServiceClient{cc}
}

func (c *hooksServiceClient) CreateHooksContext(ctx context.Context, in *CreateHooksContextRequest, opts ...grpc.CallOption) (*CreateHooksContextResponse, error) {
	out := new(CreateHooksContextResponse)
	err := c.cc.Invoke(ctx, "/couchbase.internal.hooks.v1.HooksService/CreateHooksContext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hooksServiceClient) DestroyHooksContext(ctx context.Context, in *DestroyHooksContextRequest, opts ...grpc.CallOption) (*DestroyHooksContextResponse, error) {
	out := new(DestroyHooksContextResponse)
	err := c.cc.Invoke(ctx, "/couchbase.internal.hooks.v1.HooksService/DestroyHooksContext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hooksServiceClient) AddHooks(ctx context.Context, in *AddHooksRequest, opts ...grpc.CallOption) (*AddHooksResponse, error) {
	out := new(AddHooksResponse)
	err := c.cc.Invoke(ctx, "/couchbase.internal.hooks.v1.HooksService/AddHooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hooksServiceClient) WatchBarrier(ctx context.Context, in *WatchBarrierRequest, opts ...grpc.CallOption) (HooksService_WatchBarrierClient, error) {
	stream, err := c.cc.NewStream(ctx, &HooksService_ServiceDesc.Streams[0], "/couchbase.internal.hooks.v1.HooksService/WatchBarrier", opts...)
	if err != nil {
		return nil, err
	}
	x := &hooksServiceWatchBarrierClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HooksService_WatchBarrierClient interface {
	Recv() (*WatchBarrierResponse, error)
	grpc.ClientStream
}

type hooksServiceWatchBarrierClient struct {
	grpc.ClientStream
}

func (x *hooksServiceWatchBarrierClient) Recv() (*WatchBarrierResponse, error) {
	m := new(WatchBarrierResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hooksServiceClient) SignalBarrier(ctx context.Context, in *SignalBarrierRequest, opts ...grpc.CallOption) (*SignalBarrierResponse, error) {
	out := new(SignalBarrierResponse)
	err := c.cc.Invoke(ctx, "/couchbase.internal.hooks.v1.HooksService/SignalBarrier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HooksServiceServer is the server API for HooksService service.
// All implementations must embed UnimplementedHooksServiceServer
// for forward compatibility
type HooksServiceServer interface {
	CreateHooksContext(context.Context, *CreateHooksContextRequest) (*CreateHooksContextResponse, error)
	DestroyHooksContext(context.Context, *DestroyHooksContextRequest) (*DestroyHooksContextResponse, error)
	AddHooks(context.Context, *AddHooksRequest) (*AddHooksResponse, error)
	WatchBarrier(*WatchBarrierRequest, HooksService_WatchBarrierServer) error
	SignalBarrier(context.Context, *SignalBarrierRequest) (*SignalBarrierResponse, error)
	mustEmbedUnimplementedHooksServiceServer()
}

// UnimplementedHooksServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHooksServiceServer struct {
}

func (UnimplementedHooksServiceServer) CreateHooksContext(context.Context, *CreateHooksContextRequest) (*CreateHooksContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHooksContext not implemented")
}
func (UnimplementedHooksServiceServer) DestroyHooksContext(context.Context, *DestroyHooksContextRequest) (*DestroyHooksContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyHooksContext not implemented")
}
func (UnimplementedHooksServiceServer) AddHooks(context.Context, *AddHooksRequest) (*AddHooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHooks not implemented")
}
func (UnimplementedHooksServiceServer) WatchBarrier(*WatchBarrierRequest, HooksService_WatchBarrierServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchBarrier not implemented")
}
func (UnimplementedHooksServiceServer) SignalBarrier(context.Context, *SignalBarrierRequest) (*SignalBarrierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalBarrier not implemented")
}
func (UnimplementedHooksServiceServer) mustEmbedUnimplementedHooksServiceServer() {}

// UnsafeHooksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HooksServiceServer will
// result in compilation errors.
type UnsafeHooksServiceServer interface {
	mustEmbedUnimplementedHooksServiceServer()
}

func RegisterHooksServiceServer(s grpc.ServiceRegistrar, srv HooksServiceServer) {
	s.RegisterService(&HooksService_ServiceDesc, srv)
}

func _HooksService_CreateHooksContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHooksContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HooksServiceServer).CreateHooksContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/couchbase.internal.hooks.v1.HooksService/CreateHooksContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HooksServiceServer).CreateHooksContext(ctx, req.(*CreateHooksContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HooksService_DestroyHooksContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyHooksContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HooksServiceServer).DestroyHooksContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/couchbase.internal.hooks.v1.HooksService/DestroyHooksContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HooksServiceServer).DestroyHooksContext(ctx, req.(*DestroyHooksContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HooksService_AddHooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HooksServiceServer).AddHooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/couchbase.internal.hooks.v1.HooksService/AddHooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HooksServiceServer).AddHooks(ctx, req.(*AddHooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HooksService_WatchBarrier_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchBarrierRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HooksServiceServer).WatchBarrier(m, &hooksServiceWatchBarrierServer{stream})
}

type HooksService_WatchBarrierServer interface {
	Send(*WatchBarrierResponse) error
	grpc.ServerStream
}

type hooksServiceWatchBarrierServer struct {
	grpc.ServerStream
}

func (x *hooksServiceWatchBarrierServer) Send(m *WatchBarrierResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HooksService_SignalBarrier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalBarrierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HooksServiceServer).SignalBarrier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/couchbase.internal.hooks.v1.HooksService/SignalBarrier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HooksServiceServer).SignalBarrier(ctx, req.(*SignalBarrierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HooksService_ServiceDesc is the grpc.ServiceDesc for HooksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HooksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "couchbase.internal.hooks.v1.HooksService",
	HandlerType: (*HooksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHooksContext",
			Handler:    _HooksService_CreateHooksContext_Handler,
		},
		{
			MethodName: "DestroyHooksContext",
			Handler:    _HooksService_DestroyHooksContext_Handler,
		},
		{
			MethodName: "AddHooks",
			Handler:    _HooksService_AddHooks_Handler,
		},
		{
			MethodName: "SignalBarrier",
			Handler:    _HooksService_SignalBarrier_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchBarrier",
			Handler:       _HooksService_WatchBarrier_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "couchbase/internal/hooks/v1/hooks.proto",
}
